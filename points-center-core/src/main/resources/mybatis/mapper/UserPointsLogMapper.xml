<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="fun.pullock.points.core.dao.mapper.UserPointsLogMapper">
  <resultMap id="BaseResultMap" type="fun.pullock.points.core.dao.model.UserPointsLogDO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="config_id" jdbcType="BIGINT" property="configId" />
    <result column="channel_code" jdbcType="VARCHAR" property="channelCode" />
    <result column="type" jdbcType="SMALLINT" property="type" />
    <result column="number" jdbcType="BIGINT" property="number" />
    <result column="source" jdbcType="VARCHAR" property="source" />
    <result column="unique_source_id" jdbcType="VARCHAR" property="uniqueSourceId" />
    <result column="biz_id" jdbcType="BIGINT" property="bizId" />
    <result column="biz_description" jdbcType="VARCHAR" property="bizDescription" />
    <result column="status" jdbcType="SMALLINT" property="status" />
    <result column="detail" jdbcType="LONGVARCHAR" property="detail" />
  </resultMap>

  <sql id="Base_Column_List">
    id, create_time, update_time, user_id, config_id, channel_code, type, number, source, 
    unique_source_id, biz_id, biz_description, status, detail
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_points_log
    where id = #{id,jdbcType=BIGINT}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user_points_log
    where id = #{id,jdbcType=BIGINT}
  </delete>

  <insert id="insert" keyColumn="id" keyProperty="id" useGeneratedKeys="true" parameterType="fun.pullock.points.core.dao.model.UserPointsLogDO">
    insert into user_points_log (
      id, create_time, update_time,
      user_id, config_id, channel_code, 
      type, number, source, 
      unique_source_id, biz_id, biz_description,
      status, detail
    ) values (
      #{id,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},
      #{userId,jdbcType=BIGINT}, #{configId,jdbcType=BIGINT}, #{channelCode,jdbcType=VARCHAR}, 
      #{type,jdbcType=SMALLINT}, #{number,jdbcType=BIGINT}, #{source,jdbcType=VARCHAR}, 
      #{uniqueSourceId,jdbcType=VARCHAR}, #{bizId,jdbcType=BIGINT}, #{bizDescription,jdbcType=VARCHAR},
      #{status,jdbcType=SMALLINT}, #{detail,jdbcType=LONGVARCHAR}
    )
  </insert>

  <insert id="insertSelective" keyColumn="id" keyProperty="id" useGeneratedKeys="true" parameterType="fun.pullock.points.core.dao.model.UserPointsLogDO">
    insert into user_points_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="configId != null">
        config_id,
      </if>
      <if test="channelCode != null">
        channel_code,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="number != null">
        number,
      </if>
      <if test="source != null">
        source,
      </if>
      <if test="uniqueSourceId != null">
        unique_source_id,
      </if>
      <if test="bizId != null">
        biz_id,
      </if>
      <if test="bizDescription != null">
        biz_description,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="detail != null">
        detail,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="configId != null">
        #{configId,jdbcType=BIGINT},
      </if>
      <if test="channelCode != null">
        #{channelCode,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=SMALLINT},
      </if>
      <if test="number != null">
        #{number,jdbcType=BIGINT},
      </if>
      <if test="source != null">
        #{source,jdbcType=VARCHAR},
      </if>
      <if test="uniqueSourceId != null">
        #{uniqueSourceId,jdbcType=VARCHAR},
      </if>
      <if test="bizId != null">
        #{bizId,jdbcType=BIGINT},
      </if>
      <if test="bizDescription != null">
        #{bizDescription,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=SMALLINT},
      </if>
      <if test="detail != null">
        #{detail,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="fun.pullock.points.core.dao.model.UserPointsLogDO">
    update user_points_log
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="configId != null">
        config_id = #{configId,jdbcType=BIGINT},
      </if>
      <if test="channelCode != null">
        channel_code = #{channelCode,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=SMALLINT},
      </if>
      <if test="number != null">
        number = #{number,jdbcType=BIGINT},
      </if>
      <if test="source != null">
        source = #{source,jdbcType=VARCHAR},
      </if>
      <if test="uniqueSourceId != null">
        unique_source_id = #{uniqueSourceId,jdbcType=VARCHAR},
      </if>
      <if test="bizId != null">
        biz_id = #{bizId,jdbcType=BIGINT},
      </if>
      <if test="bizDescription != null">
        biz_description = #{bizDescription,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=SMALLINT},
      </if>
      <if test="detail != null">
        detail = #{detail,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateByPrimaryKey" parameterType="fun.pullock.points.core.dao.model.UserPointsLogDO">
    update user_points_log
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=BIGINT},
      config_id = #{configId,jdbcType=BIGINT},
      channel_code = #{channelCode,jdbcType=VARCHAR},
      type = #{type,jdbcType=SMALLINT},
      number = #{number,jdbcType=BIGINT},
      source = #{source,jdbcType=VARCHAR},
      unique_source_id = #{uniqueSourceId,jdbcType=VARCHAR},
      biz_id = #{bizId,jdbcType=BIGINT},
      biz_description = #{bizDescription,jdbcType=VARCHAR},
      status = #{status,jdbcType=SMALLINT},
      detail = #{detail,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectByUniqueKey" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user_points_log
    where user_id = #{userId,jdbcType=BIGINT}
      and source = #{source,jdbcType=VARCHAR}
      and unique_source_id = #{uniqueSourceId,jdbcType=VARCHAR}
  </select>

  <update id="updateStatus">
    update user_points_log
    set update_time = now(),
        status = #{newStatus,jdbcType=SMALLINT}
    where id = #{id,jdbcType=BIGINT}
      and status = #{oldStatus,jdbcType=SMALLINT}
  </update>

  <update id="updateDetail">
    update user_points_log
    set update_time = now(),
        detail = #{detail,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectAll" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user_points_log
    where user_id = #{userId,jdbcType=BIGINT}
    order by id desc
  </select>
</mapper>