<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="fun.pullock.points.core.dao.mapper.UserPointsMapper">
  <resultMap id="BaseResultMap" type="fun.pullock.points.core.dao.model.UserPointsDO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="total" jdbcType="BIGINT" property="total" />
    <result column="used" jdbcType="BIGINT" property="used" />
    <result column="expired" jdbcType="BIGINT" property="expired" />
  </resultMap>

  <sql id="Base_Column_List">
    id, create_time, update_time, user_id, total, used, expired
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_points
    where id = #{id,jdbcType=BIGINT}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user_points
    where id = #{id,jdbcType=BIGINT}
  </delete>

  <insert id="insert" parameterType="fun.pullock.points.core.dao.model.UserPointsDO">
    insert into user_points (
      id, create_time, update_time,
      user_id, total, used, expired
    ) values (
      #{id,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},
      #{userId,jdbcType=BIGINT}, #{total,jdbcType=BIGINT}, #{used,jdbcType=BIGINT}, #{expired,jdbcType=BIGINT}
    )
  </insert>

  <insert id="insertSelective" parameterType="fun.pullock.points.core.dao.model.UserPointsDO">
    insert into user_points
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="total != null">
        total,
      </if>
      <if test="used != null">
        used,
      </if>
      <if test="expired != null">
        expired,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="total != null">
        #{total,jdbcType=BIGINT},
      </if>
      <if test="used != null">
        #{used,jdbcType=BIGINT},
      </if>
      <if test="expired != null">
        #{expired,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="fun.pullock.points.core.dao.model.UserPointsDO">
    update user_points
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="total != null">
        total = #{total,jdbcType=BIGINT},
      </if>
      <if test="used != null">
        used = #{used,jdbcType=BIGINT},
      </if>
      <if test="expired != null">
        expired = #{expired,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateByPrimaryKey" parameterType="fun.pullock.points.core.dao.model.UserPointsDO">
    update user_points
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=BIGINT},
      total = #{total,jdbcType=BIGINT},
      used = #{used,jdbcType=BIGINT},
      expired = #{expired,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectByUserId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user_points
    where user_id = #{userId,jdbcType=BIGINT}
  </select>

  <insert id="insertOrUpdate" parameterType="fun.pullock.points.core.dao.model.UserPointsDO">
    insert into user_points (
      id, create_time, update_time,
      user_id, total, used, expired
    ) values (
      null, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},
      #{userId,jdbcType=BIGINT}, #{total,jdbcType=BIGINT}, #{used,jdbcType=BIGINT}, #{expired,jdbcType=BIGINT}
   ) on duplicate key update total = total + #{total}, update_time = now()
  </insert>

  <update id="grant">
    update user_points
    set update_time = now(),
        total = total + #{number}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="use">
    update user_points
    set update_time = now(),
        used = used + #{number}
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
</mapper>